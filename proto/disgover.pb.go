// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/disgover.proto

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	proto/disgover.proto

It has these top-level messages:
	Endpoint
	Contact
	FindRequest
	Empty
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

type Endpoint struct {
	Host string `protobuf:"bytes,1,opt,name=Host" json:"Host,omitempty"`
	Port int64  `protobuf:"varint,2,opt,name=Port" json:"Port,omitempty"`
}

func (m *Endpoint) Reset()                    { *m = Endpoint{} }
func (m *Endpoint) String() string            { return proto1.CompactTextString(m) }
func (*Endpoint) ProtoMessage()               {}
func (*Endpoint) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Endpoint) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *Endpoint) GetPort() int64 {
	if m != nil {
		return m.Port
	}
	return 0
}

type Contact struct {
	Id       string    `protobuf:"bytes,1,opt,name=Id" json:"Id,omitempty"`
	Endpoint *Endpoint `protobuf:"bytes,2,opt,name=Endpoint" json:"Endpoint,omitempty"`
}

func (m *Contact) Reset()                    { *m = Contact{} }
func (m *Contact) String() string            { return proto1.CompactTextString(m) }
func (*Contact) ProtoMessage()               {}
func (*Contact) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Contact) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Contact) GetEndpoint() *Endpoint {
	if m != nil {
		return m.Endpoint
	}
	return nil
}

type FindRequest struct {
	ContactId string   `protobuf:"bytes,1,opt,name=ContactId" json:"ContactId,omitempty"`
	Sender    *Contact `protobuf:"bytes,2,opt,name=Sender" json:"Sender,omitempty"`
}

func (m *FindRequest) Reset()                    { *m = FindRequest{} }
func (m *FindRequest) String() string            { return proto1.CompactTextString(m) }
func (*FindRequest) ProtoMessage()               {}
func (*FindRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *FindRequest) GetContactId() string {
	if m != nil {
		return m.ContactId
	}
	return ""
}

func (m *FindRequest) GetSender() *Contact {
	if m != nil {
		return m.Sender
	}
	return nil
}

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto1.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func init() {
	proto1.RegisterType((*Endpoint)(nil), "proto.Endpoint")
	proto1.RegisterType((*Contact)(nil), "proto.Contact")
	proto1.RegisterType((*FindRequest)(nil), "proto.FindRequest")
	proto1.RegisterType((*Empty)(nil), "proto.Empty")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for DisGoverGrpc service

type DisGoverGrpcClient interface {
	PeerPing(ctx context.Context, in *Contact, opts ...grpc.CallOption) (*Contact, error)
	PeerFind(ctx context.Context, in *FindRequest, opts ...grpc.CallOption) (*Contact, error)
}

type disGoverGrpcClient struct {
	cc *grpc.ClientConn
}

func NewDisGoverGrpcClient(cc *grpc.ClientConn) DisGoverGrpcClient {
	return &disGoverGrpcClient{cc}
}

func (c *disGoverGrpcClient) PeerPing(ctx context.Context, in *Contact, opts ...grpc.CallOption) (*Contact, error) {
	out := new(Contact)
	err := grpc.Invoke(ctx, "/proto.DisGoverGrpc/PeerPing", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *disGoverGrpcClient) PeerFind(ctx context.Context, in *FindRequest, opts ...grpc.CallOption) (*Contact, error) {
	out := new(Contact)
	err := grpc.Invoke(ctx, "/proto.DisGoverGrpc/PeerFind", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DisGoverGrpc service

type DisGoverGrpcServer interface {
	PeerPing(context.Context, *Contact) (*Contact, error)
	PeerFind(context.Context, *FindRequest) (*Contact, error)
}

func RegisterDisGoverGrpcServer(s *grpc.Server, srv DisGoverGrpcServer) {
	s.RegisterService(&_DisGoverGrpc_serviceDesc, srv)
}

func _DisGoverGrpc_PeerPing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Contact)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DisGoverGrpcServer).PeerPing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DisGoverGrpc/PeerPing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DisGoverGrpcServer).PeerPing(ctx, req.(*Contact))
	}
	return interceptor(ctx, in, info, handler)
}

func _DisGoverGrpc_PeerFind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DisGoverGrpcServer).PeerFind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DisGoverGrpc/PeerFind",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DisGoverGrpcServer).PeerFind(ctx, req.(*FindRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DisGoverGrpc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.DisGoverGrpc",
	HandlerType: (*DisGoverGrpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PeerPing",
			Handler:    _DisGoverGrpc_PeerPing_Handler,
		},
		{
			MethodName: "PeerFind",
			Handler:    _DisGoverGrpc_PeerFind_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/disgover.proto",
}

func init() { proto1.RegisterFile("proto/disgover.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 234 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x8f, 0xcf, 0x4a, 0xc4, 0x30,
	0x10, 0xc6, 0x6d, 0x75, 0xff, 0xcd, 0xca, 0x0a, 0x83, 0x87, 0x45, 0x3c, 0x2c, 0x39, 0xc8, 0x82,
	0xb2, 0x4a, 0x7d, 0x04, 0xdd, 0xd6, 0xde, 0x4a, 0xfa, 0x04, 0xda, 0x84, 0x92, 0x83, 0x49, 0x4c,
	0x46, 0xc1, 0xb7, 0x97, 0xa6, 0xb1, 0x95, 0x7a, 0xca, 0xcc, 0x37, 0xdf, 0xf7, 0xcb, 0x0c, 0x5c,
	0x5a, 0x67, 0xc8, 0xdc, 0x0b, 0xe5, 0x5b, 0xf3, 0x25, 0xdd, 0x21, 0xb4, 0x38, 0x0b, 0x0f, 0xcb,
	0x60, 0x79, 0xd4, 0xc2, 0x1a, 0xa5, 0x09, 0x11, 0xce, 0x5e, 0x8c, 0xa7, 0x6d, 0xb2, 0x4b, 0xf6,
	0x2b, 0x1e, 0xea, 0x4e, 0xab, 0x8c, 0xa3, 0x6d, 0xba, 0x4b, 0xf6, 0xa7, 0x3c, 0xd4, 0x2c, 0x87,
	0xc5, 0x93, 0xd1, 0xf4, 0xda, 0x10, 0x6e, 0x20, 0x2d, 0x45, 0x0c, 0xa4, 0xa5, 0xc0, 0xdb, 0x11,
	0x17, 0x22, 0xeb, 0xec, 0xa2, 0xff, 0xef, 0xf0, 0x2b, 0xf3, 0xc1, 0xc0, 0x6a, 0x58, 0xe7, 0x4a,
	0x0b, 0x2e, 0x3f, 0x3e, 0xa5, 0x27, 0xbc, 0x86, 0x55, 0xc4, 0x0e, 0xc8, 0x51, 0xc0, 0x1b, 0x98,
	0xd7, 0x52, 0x0b, 0xe9, 0x22, 0x77, 0x13, 0xb9, 0xd1, 0xc1, 0xe3, 0x94, 0x2d, 0x60, 0x76, 0x7c,
	0xb7, 0xf4, 0x9d, 0x69, 0x38, 0x7f, 0x56, 0xbe, 0xe8, 0x4e, 0x2e, 0x9c, 0x6d, 0xf0, 0x0e, 0x96,
	0x95, 0x94, 0xae, 0x52, 0xba, 0xc5, 0x49, 0xf8, 0x6a, 0xd2, 0xb3, 0x13, 0x7c, 0xe8, 0xdd, 0xdd,
	0x7e, 0x88, 0x71, 0xfa, 0x67, 0xd9, 0xff, 0x89, 0xb7, 0x79, 0x10, 0x1e, 0x7f, 0x02, 0x00, 0x00,
	0xff, 0xff, 0x9b, 0x4b, 0x2c, 0xf5, 0x6f, 0x01, 0x00, 0x00,
}
